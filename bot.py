# bot.py

import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.constants import ChatMemberStatus # ‡¶è‡¶ü‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßã‡¶°‡ßá ‡¶õ‡¶ø‡¶≤, ‡¶†‡¶ø‡¶ï ‡¶Ü‡¶õ‡ßá
from telegram.error import BadRequest, Forbidden
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler
from twilio.rest import Client # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßã‡¶°‡ßá ‡¶è‡¶ü‡¶ø ‡¶Ü‡¶õ‡ßá
import os
import threading
from flask import Flask # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßã‡¶°‡ßá ‡¶è‡¶ü‡¶ø ‡¶Ü‡¶õ‡ßá
import traceback # ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶ü‡ßç‡¶∞‡ßá‡¶∏‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï ‡¶≤‡¶ó ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# Globals
user_sessions = {}  # user_id -> {'sid': str, 'auth': str, 'client': Client, 'number': str}

# State for ConversationHandler
LOGIN_AWAITING_CREDENTIALS = range(1)

# ---- English Menu Texts with Emojis (Standard Font) ----
LOGIN_TEXT = 'üîë Login'
BUY_TEXT = 'üõí Buy Number'
SHOW_MESSAGES_TEXT = '‚úâÔ∏è Show Messages'
REMOVE_NUMBER_TEXT = 'üóëÔ∏è Remove Number'
LOGOUT_TEXT = '‚Ü™Ô∏è Logout'

# ---- Channel/Group Join Configuration ----
TARGET_CHANNEL_USERNAME = "@boss_universe75"
TARGET_GROUP_USERNAME = "@boss_universe75_support"
TARGET_CHANNEL_ID = -1002652802704
TARGET_GROUP_ID = -1002623419206
JOIN_CHANNEL_PROMPT_TEXT = "‡¶è‡¶ü‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡•§ ‡¶∏‡¶ï‡¶≤ ‡¶™‡ßç‡¶∞‡¶ï‡¶æ‡¶∞ ‡¶Ü‡¶Ø‡¶º‡ßá‡¶∞ ‡¶â‡¶™‡¶æ‡¶Ø‡¶º ‡¶ì ‡¶ï‡ßå‡¶∂‡¶≤ ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶∏‡¶¨‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ ‡¶™‡¶æ‡¶∂‡ßá ‡¶•‡¶æ‡¶ï‡ßÅ‡¶®‡•§"
JOIN_GROUP_PROMPT_TEXT = "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§"
USER_COMPLETED_ALL_JOINS_KEY = 'has_completed_all_joins'
VERIFY_ALL_JOINS_CALLBACK_DATA = "verify_all_joins"

# Persistent menu (‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßã‡¶°‡ßá‡¶∞ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡¶ø‡¶Ç ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡ßü‡ßÄ)
menu_keyboard = [
    [LOGIN_TEXT],
    [BUY_TEXT, SHOW_MESSAGES_TEXT, REMOVE_NUMBER_TEXT],
    [LOGOUT_TEXT]
]
reply_markup = ReplyKeyboardMarkup(menu_keyboard, resize_keyboard=True, one_time_keyboard=False)

# Flask App for Keep-Alive
flask_app = Flask(__name__)

@flask_app.route('/')
def keep_alive_route():
    return 'Bot is alive and kicking!'

def run_flask():
    port = int(os.environ.get('PORT', 8080))
    flask_app.run(host='0.0.0.0', port=port)

# --- Helper function to check channel/group memberships (AttributeError ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§) ---
async def check_all_memberships(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    is_member_of_channel = False
    is_member_of_group = False
    
    # ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏‡ßá‡¶∞ ‡¶ó‡ßç‡¶∞‡¶π‡¶£‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ‡¶ó‡ßÅ‡¶≤‡ßã
    ACCEPTED_STATUSES = ["member", "administrator", "creator"]

    # ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡¶∂‡¶ø‡¶™ ‡¶ö‡ßá‡¶ï
    try:
        if context.bot:
            member_channel = await context.bot.get_chat_member(chat_id=TARGET_CHANNEL_ID, user_id=user_id)
            # member_channel.status.value ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶§‡ßÅ‡¶≤‡¶®‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
            if hasattr(member_channel, 'status') and member_channel.status and hasattr(member_channel.status, 'value') and member_channel.status.value in ACCEPTED_STATUSES:
                is_member_of_channel = True
                logger.info(f"User {user_id} IS a member of channel {TARGET_CHANNEL_ID} with status value: {member_channel.status.value}")
            elif hasattr(member_channel, 'status') and member_channel.status: 
                 logger.info(f"User {user_id} is NOT a member of channel {TARGET_CHANNEL_ID} (status: {member_channel.status}, value: {getattr(member_channel.status, 'value', 'N/A')})")
            else:
                 logger.info(f"User {user_id} - Could not determine valid status for channel {TARGET_CHANNEL_ID}")
        else:
            logger.error(f"Bot instance not found in context for channel {TARGET_CHANNEL_ID} check for user {user_id}.")
    except BadRequest as e:
        logger.warning(f"BadRequest when checking channel {TARGET_CHANNEL_ID} for user {user_id}: {e}")
    except Forbidden as e:
        logger.error(f"Forbidden: Bot cannot access channel {TARGET_CHANNEL_ID} members for user {user_id}. Is it an admin? Error: {e}")
    except Exception as e:
        logger.error(f"Unexpected error checking channel {TARGET_CHANNEL_ID} for user {user_id}. Exception Type: {type(e)}, Error: {e}")
        logger.error(f"Full Traceback for channel check error: {traceback.format_exc()}")

    # ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶Æ‡ßá‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡¶∂‡¶ø‡¶™ ‡¶ö‡ßá‡¶ï
    try:
        if context.bot:
            member_group = await context.bot.get_chat_member(chat_id=TARGET_GROUP_ID, user_id=user_id)
            # member_group.status.value ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡ßÅ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶§‡ßÅ‡¶≤‡¶®‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
            if hasattr(member_group, 'status') and member_group.status and hasattr(member_group.status, 'value') and member_group.status.value in ACCEPTED_STATUSES:
                is_member_of_group = True
                logger.info(f"User {user_id} IS a member of group {TARGET_GROUP_ID} with status value: {member_group.status.value}")
            elif hasattr(member_group, 'status') and member_group.status:
                 logger.info(f"User {user_id} is NOT a member of group {TARGET_GROUP_ID} (status: {member_group.status}, value: {getattr(member_group.status, 'value', 'N/A')})")
            else:
                logger.info(f"User {user_id} - Could not determine valid status for group {TARGET_GROUP_ID}")
        else:
            logger.error(f"Bot instance not found in context for group {TARGET_GROUP_ID} check for user {user_id}.")
    except BadRequest as e:
        logger.warning(f"BadRequest when checking group {TARGET_GROUP_ID} for user {user_id}: {e}")
    except Forbidden as e:
        logger.error(f"Forbidden: Bot cannot access group {TARGET_GROUP_ID} members for user {user_id}. Is it an admin? Error: {e}")
    except Exception as e:
        logger.error(f"Unexpected error checking group {TARGET_GROUP_ID} for user {user_id}. Exception Type: {type(e)}, Error: {e}")
        logger.error(f"Full Traceback for group check error: {traceback.format_exc()}")
        
    return is_member_of_channel and is_member_of_group

# send_join_prompt ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá ‡¶Ü‡¶ó‡ßá‡¶∞ AttributeError ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶õ‡ßá
async def send_join_prompt(update_or_query, context: ContextTypes.DEFAULT_TYPE):
    current_user = None
    if hasattr(update_or_query, 'effective_user') and update_or_query.effective_user:
        current_user = update_or_query.effective_user
    elif hasattr(update_or_query, 'from_user') and update_or_query.from_user: 
        current_user = update_or_query.from_user
    
    if not current_user:
        logger.error("send_join_prompt: Could not determine user from update_or_query object.")
        if hasattr(update_or_query, 'callback_query') and update_or_query.callback_query:
            try:
                await update_or_query.callback_query.answer("‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶∏‡¶®‡¶æ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§", show_alert=True)
            except Exception as e_ans:
                logger.error(f"Error sending answer to callback query in send_join_prompt: {e_ans}")
        return

    user_id = current_user.id
    
    join_message = (
        f"üëã ‡¶è‡¶á ‡¶¨‡¶ü‡¶ü‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡ßÇ‡¶∞‡ßç‡¶£‡¶≠‡¶æ‡¶¨‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø, ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ‡ßá‡¶á ‡¶ú‡¶Ø‡¶º‡ßá‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:\n\n"
        f"‡ßß. **‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤:** {JOIN_CHANNEL_PROMPT_TEXT}\n"
        f"   ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®: {TARGET_CHANNEL_USERNAME}\n\n"
        f"‡ß®. **‡¶ó‡ßç‡¶∞‡ßÅ‡¶™:** {JOIN_GROUP_PROMPT_TEXT}\n"
        f"   ‡¶ú‡ßü‡ßá‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®: {TARGET_GROUP_USERNAME}\n\n"
        f"‡¶¶‡ßÅ‡¶ü‡ßã‡¶§‡ßá‡¶á ‡¶ú‡¶Ø‡¶º‡ßá‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡¶∞ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®:"
    )
    keyboard = [[InlineKeyboardButton("‚úÖ ‡¶Ü‡¶Æ‡¶ø ‡¶¶‡ßÅ‡¶ü‡ßã‡¶§‡ßá‡¶á ‡¶ú‡¶Ø‡¶º‡ßá‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø (‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®)", callback_data=VERIFY_ALL_JOINS_CALLBACK_DATA)]]
    reply_markup_join = InlineKeyboardMarkup(keyboard)

    try:
        if hasattr(update_or_query, 'message') and update_or_query.message:
            await update_or_query.message.reply_text(join_message, reply_markup=reply_markup_join)
        elif hasattr(update_or_query, 'callback_query') and update_or_query.callback_query:
            await update_or_query.callback_query.edit_message_text(join_message, reply_markup=reply_markup_join)
    except BadRequest as e:
        logger.warning(f"Could not edit message for join prompt (User: {user_id}). Error: {e}. Sending new message instead.")
        chat_id_to_send = None
        if hasattr(update_or_query, 'callback_query') and update_or_query.callback_query and update_or_query.callback_query.message:
            chat_id_to_send = update_or_query.callback_query.message.chat_id
        elif hasattr(update_or_query, 'message') and update_or_query.message:
             chat_id_to_send = update_or_query.message.chat_id

        if chat_id_to_send:
            try:
                await context.bot.send_message(chat_id=chat_id_to_send, text=join_message, reply_markup=reply_markup_join)
            except Exception as send_e:
                logger.error(f"Failed to send new join_prompt message to chat_id {chat_id_to_send}. Error: {send_e}")
        else:
            logger.error(f"Could not determine chat_id to send new join_prompt for user {user_id}")


async def ensure_user_has_joined(update_or_query, context: ContextTypes.DEFAULT_TYPE) -> bool:
    user = None 
    if hasattr(update_or_query, 'effective_user') and update_or_query.effective_user:
        user = update_or_query.effective_user
    elif hasattr(update_or_query, 'from_user') and update_or_query.from_user: 
        user = update_or_query.from_user

    if not user:
        logger.warning("ensure_user_has_joined: effective_user/from_user not found.")
        if hasattr(update_or_query, 'message') and update_or_query.message: 
            await update_or_query.message.reply_text("‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶∏‡¶®‡¶æ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ /start ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡¶®‡•§")
        elif hasattr(update_or_query, 'callback_query') and update_or_query.callback_query: 
            await update_or_query.callback_query.answer("‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶∏‡¶®‡¶æ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", show_alert=True)
        return False
        
    user_id = user.id
    if context.user_data.get(USER_COMPLETED_ALL_JOINS_KEY, False):
        return True

    all_joined = await check_all_memberships(user_id, context)
    if all_joined:
        context.user_data[USER_COMPLETED_ALL_JOINS_KEY] = True
        return True
    else:
        context.user_data[USER_COMPLETED_ALL_JOINS_KEY] = False
        await send_join_prompt(update_or_query, context)
        return False

# --- Telegram Bot Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.effective_user: 
        logger.warning("Start command received with no effective_user.")
        return

    if await ensure_user_has_joined(update, context): 
        await update.message.reply_text(
            f"üëã ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶ì ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø‡•§ '{LOGIN_TEXT}' ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ö‡¶æ‡¶™‡ßÅ‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶•‡ßá‡¶ï‡ßá ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®‡•§",
            reply_markup=reply_markup
        )

async def verify_all_joins_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.from_user:
        logger.warning("verify_all_joins_callback: query or query.from_user not found.")
        if query: await query.answer("‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
        return

    await query.answer() 
    user_id = query.from_user.id

    all_joined = await check_all_memberships(user_id, context)
    if all_joined:
        context.user_data[USER_COMPLETED_ALL_JOINS_KEY] = True
        try:
            await query.edit_message_text(
                text=f"üéâ ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶! ‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶è‡¶¨‡¶Ç ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø‡¶™‡¶¶ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶¨‡¶ü‡¶ü‡¶ø ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶®‡¶≤‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§"
            )
        except BadRequest as e: 
            logger.warning(f"Could not edit success message for user {user_id}: {e}")
            await context.bot.send_message(chat_id=user_id, text=f"üéâ ‡¶ß‡¶®‡ßç‡¶Ø‡¶¨‡¶æ‡¶¶! ‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶è‡¶¨‡¶Ç ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá‡¶∞ ‡¶∏‡¶¶‡¶∏‡ßç‡¶Ø‡¶™‡¶¶ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§ ‡¶¨‡¶ü‡¶ü‡¶ø ‡¶è‡¶ñ‡¶® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ü‡¶®‡¶≤‡¶ï ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
        await context.bot.send_message(chat_id=user_id, text="‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ:", reply_markup=reply_markup)
    else:
        context.user_data[USER_COMPLETED_ALL_JOINS_KEY] = False
        original_message_text = "üòî ‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶∏‡¶´‡¶≤ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ü‡¶™‡¶®‡¶ø ‡¶â‡¶≠‡ßü ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ‡ßá ‡¶ú‡ßü‡ßá‡¶® ‡¶Ü‡¶õ‡ßá‡¶®‡•§"
        try:
            await query.edit_message_text(text=original_message_text)
        except BadRequest as e:
            logger.warning(f"Could not edit failure message for user {user_id}: {e}")
        await send_join_prompt(query, context) 


async def login_command_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await ensure_user_has_joined(update, context): 
        return ConversationHandler.END 

    user_id = update.effective_user.id
    if user_id in user_sessions:
        await update.message.reply_text("‚úÖ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶õ‡ßá‡¶®‡•§", reply_markup=reply_markup)
        return ConversationHandler.END
    await update.message.reply_text("üìù ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Twilio Account SID ‡¶è‡¶¨‡¶Ç Auth Token ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶¶‡¶ø‡¶®, ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡ßç‡¶™‡ßá‡¶∏ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶ï‡¶∞‡ßá (‡¶Ø‡ßá‡¶Æ‡¶®: ACxxxxxxxxxxxxxx xxxxxxxxxxxxxx ):")
    return LOGIN_AWAITING_CREDENTIALS

async def receive_credentials(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_input = update.message.text.strip()
    
    main_menu_button_texts = [LOGIN_TEXT, BUY_TEXT, SHOW_MESSAGES_TEXT, REMOVE_NUMBER_TEXT, LOGOUT_TEXT]
    if user_input in main_menu_button_texts: 
        await update.message.reply_text(
            f"‚úã ‡¶è‡¶á ‡¶∏‡¶Æ‡¶Ø‡¶º‡ßá ‡¶¨‡¶æ‡¶ü‡¶® ‡¶®‡¶æ ‡¶ö‡ßá‡¶™‡ßá, ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Twilio Account SID ‡¶è‡¶¨‡¶Ç Auth Token ‡¶ü‡¶æ‡¶á‡¶™ ‡¶ï‡¶∞‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡•§"
            f" ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶§‡ßá '{LOGIN_TEXT}' ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ö‡¶æ‡¶™‡ßÅ‡¶®‡•§"
        )
        return ConversationHandler.END  

    try:
        sid, auth = user_input.split(maxsplit=1)
        if not (sid.startswith("AC") and len(sid) == 34):
            await update.message.reply_text(
                f"‚ö†Ô∏è ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ SID ({sid}) ‡¶∏‡¶†‡¶ø‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶®‡ßá‡¶á ‡¶¨‡¶≤‡ßá ‡¶Æ‡¶®‡ßá ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§ "
                f"‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ '{LOGIN_TEXT}' ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ö‡ßá‡¶™‡ßá ‡¶∏‡¶†‡¶ø‡¶ï SID ‡¶ì Auth Token ‡¶¶‡¶ø‡¶®‡•§"
            )
            return ConversationHandler.END

        client = Client(sid, auth)
        client.api.accounts(sid).fetch() 
        user_sessions[user_id] = {'sid': sid, 'auth': auth, 'client': client, 'number': None}
        await update.message.reply_text("üéâ ‡¶≤‡¶ó‡¶á‡¶® ‡¶∏‡¶´‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!", reply_markup=reply_markup)
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text(
            f"‚ö†Ô∏è SID ‡¶è‡¶¨‡¶Ç Auth Token ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá SID, ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡ßç‡¶™‡ßá‡¶∏, ‡¶§‡¶æ‡¶∞‡¶™‡¶∞ Auth Token ‡¶¶‡¶ø‡¶®‡•§ "
            f"‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶§‡ßá '{LOGIN_TEXT}' ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ö‡¶æ‡¶™‡ßÅ‡¶®‡•§"
        )
        return ConversationHandler.END
    except Exception as e: 
        logger.error(f"Login failed for user {user_id} (SID: {sid if 'sid' in locals() else 'N/A'}): {e}")
        await update.message.reply_text(f"‚ùå ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ SID ‡¶è‡¶¨‡¶Ç Auth Token ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ '{LOGIN_TEXT}' ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ö‡ßá‡¶™‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return ConversationHandler.END

async def logout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await ensure_user_has_joined(update, context): return 
    user_id = update.effective_user.id
    if user_id in user_sessions:
        del user_sessions[user_id]
        await update.message.reply_text("‚úÖ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡¶ó ‡¶Ü‡¶â‡¶ü ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡¶®‡•§", reply_markup=reply_markup)
    else:
        await update.message.reply_text("‚ÑπÔ∏è ‡¶Ü‡¶™‡¶®‡¶ø ‡¶≤‡¶ó‡¶á‡¶® ‡¶Ö‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶Ø‡¶º ‡¶®‡ßá‡¶á‡•§", reply_markup=reply_markup)

async def buy_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await ensure_user_has_joined(update, context): return 
    user_id = update.effective_user.id
    if user_id not in user_sessions:
        await update.message.reply_text(f"üîí ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá '{LOGIN_TEXT}' ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return
    
    client = user_sessions[user_id]['client']
    try:
        available_numbers = client.available_phone_numbers("CA").local.list(limit=5) 
        if not available_numbers:
            await update.message.reply_text("üòî ‡¶è‡¶á ‡¶Æ‡ßÅ‡¶π‡ßÇ‡¶∞‡ßç‡¶§‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶â‡¶™‡¶≤‡¶≠‡ßç‡¶Ø ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶®‡ßá‡¶á‡•§")
            return

        keyboard = []
        for number_obj in available_numbers:
            button_text = f"üõí ‡¶ï‡¶ø‡¶®‡ßÅ‡¶® {number_obj.phone_number}"
            callback_data = f"purchase_{number_obj.phone_number}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        if not keyboard:
              await update.message.reply_text("üòî ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶≤‡ßá‡¶ì ‡¶¨‡¶æ‡¶ü‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")
              return

        inline_reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üìû ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶®‡¶ø‡¶ö‡ßá ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶≤‡ßã‡•§ ‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá‡¶∞ ‡¶™‡¶æ‡¶∂‡ßá‡¶∞ '‡¶ï‡¶ø‡¶®‡ßÅ‡¶®' ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®:", reply_markup=inline_reply_markup)

    except Exception as e:
        logger.error(f"Failed to fetch numbers for user {user_id}: {e}")
        await update.message.reply_text("‚ö†Ô∏è ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶∏‡¶Æ‡ßç‡¶≠‡¶¨‡¶§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡¶è‡¶á ‡¶Ö‡¶û‡ßç‡¶ö‡¶≤‡ßá‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ï‡ßá‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡•§")

async def purchase_number_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.from_user:
        logger.warning("purchase_number_callback_handler: query or query.from_user not found.")
        if query: await query.answer("‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
        return

    if not await ensure_user_has_joined(query, context): 
        await query.answer("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶ì ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶ú‡¶Ø‡¶º‡ßá‡¶® ‡¶ï‡¶∞‡ßá ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", show_alert=True)
        return
        
    await query.answer() 
    user_id = query.from_user.id
    
    if user_id not in user_sessions:
        try:
            await query.edit_message_text(text=f"üîí ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá '{LOGIN_TEXT}' ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        except BadRequest: pass 
        return

    if user_sessions[user_id].get('number'):
        current_number = user_sessions[user_id]['number']
        try:
            await query.edit_message_text(text=f"‚ÑπÔ∏è ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ({current_number}) ‡¶ï‡ßá‡¶®‡¶æ ‡¶Ü‡¶õ‡ßá‡•§ ‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ï‡¶ø‡¶®‡¶§‡ßá ‡¶Ü‡¶ó‡ßá‡¶∞‡¶ü‡¶ø '{REMOVE_NUMBER_TEXT}' ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®‡•§")
        except BadRequest: pass
        return

    try:
        action, number_to_buy = query.data.split('_', 1)
        if action != "purchase" or not number_to_buy.startswith('+'): 
            logger.warning(f"Invalid callback data format: {query.data} for user {user_id}")
            await query.edit_message_text(text="‚ö†Ô∏è ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ï‡ßá‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
            return
    except ValueError:
        logger.warning(f"Callback data splitting error: {query.data} for user {user_id}")
        await query.edit_message_text(text="‚ö†Ô∏è ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ï‡ßá‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
        return

    client = user_sessions[user_id]['client']
    try:
        logger.info(f"User {user_id} attempting to purchase number: {number_to_buy}")
        incoming_number = client.incoming_phone_numbers.create(phone_number=number_to_buy)
        user_sessions[user_id]['number'] = incoming_number.phone_number
        success_message = f"üõçÔ∏è ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ {incoming_number.phone_number} ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡ßá‡¶®‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!"
        await query.edit_message_text(text=success_message, reply_markup=None)
    except Exception as e:
        logger.error(f"Failed to buy number {number_to_buy} for user {user_id}: {e}")
        error_message = f"‚ùå ‡¶è‡¶á ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ü‡¶ø ({number_to_buy}) ‡¶ï‡¶ø‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§"
        if "violates a uniqueness constraint" in str(e).lower() or "already provisioned" in str(e).lower():
            error_message += " ‡¶è‡¶ü‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßá‡¶â ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶õ‡ßá‡•§"
        elif "not be found" in str(e).lower() or "not available" in str(e).lower(): 
            error_message += " ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ü‡¶ø ‡¶è‡¶á ‡¶Æ‡ßÅ‡¶π‡ßÇ‡¶∞‡ßç‡¶§‡ßá ‡¶Ü‡¶∞ ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡ßá‡¶á‡•§"
        else:
            error_message += " ‡¶è‡¶ü‡¶ø ‡¶â‡¶™‡¶≤‡¶¨‡ßç‡¶ß ‡¶®‡¶æ‡¶ì ‡¶•‡¶æ‡¶ï‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏/‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á‡•§"
        await query.edit_message_text(text=error_message, reply_markup=None)

async def show_messages_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await ensure_user_has_joined(update, context): return 
    user_id = update.effective_user.id
    if user_id not in user_sessions:
        await update.message.reply_text(f"üîí ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá '{LOGIN_TEXT}' ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return
    if not user_sessions[user_id].get('number'):
        await update.message.reply_text(f"‚ÑπÔ∏è ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡ßá‡¶®‡¶æ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶®‡ßá‡¶á‡•§ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá '{BUY_TEXT}' ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ï‡¶ø‡¶®‡ßÅ‡¶®‡•§")
        return
    
    client = user_sessions[user_id]['client']
    twilio_number_str = user_sessions[user_id]['number'] 
    try:
        messages = client.messages.list(to=twilio_number_str, limit=5) 
        if not messages:
            await update.message.reply_text("üì™ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶á ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")
        else:
            response_msg = f"üì® ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ({twilio_number_str}) ‡¶è ‡¶Ü‡¶∏‡¶æ ‡¶∏‡¶æ‡¶Æ‡ßç‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ï ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú:\n\n"
            for msg_instance in messages:
                response_msg += f"‚û°Ô∏è ** ‡¶™‡ßç‡¶∞‡ßá‡¶∞‡¶ï:** {msg_instance.from_}\nüìù ** ‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ:** {msg_instance.body}\nüóìÔ∏è ** ‡¶∏‡¶Æ‡¶Ø‡¶º:** {msg_instance.date_sent.strftime('%Y-%m-%d %H:%M:%S') if msg_instance.date_sent else 'N/A'}\n---\n"
            await update.message.reply_text(response_msg, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"Failed to fetch messages for user {user_id} on number {twilio_number_str}: {e}")
        await update.message.reply_text("‚ö†Ô∏è ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")

async def remove_number_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await ensure_user_has_joined(update, context): return 
    user_id = update.effective_user.id
    if user_id not in user_sessions:
        await update.message.reply_text(f"üîí ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá '{LOGIN_TEXT}' ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return
    
    active_number = user_sessions[user_id].get('number')
    if not active_number:
        await update.message.reply_text("‚ÑπÔ∏è ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡¶§‡ßã ‡¶ï‡ßã‡¶®‡ßã ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶®‡ßá‡¶á‡•§")
        return

    confirmation_message = f"‚ÑπÔ∏è ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶®‡ßá ‡¶ï‡ßá‡¶®‡¶æ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ü‡¶ø ‡¶π‡¶≤‡ßã: {active_number}‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶ø ‡¶è‡¶á ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ü‡¶ø ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§?"
    keyboard = [[
        InlineKeyboardButton("‚úÖ ‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§", callback_data="confirm_remove_yes"),
        InlineKeyboardButton("‚ùå ‡¶®‡¶æ, ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤", callback_data="confirm_remove_no")
    ]]
    inline_reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(confirmation_message, reply_markup=inline_reply_markup)

async def confirm_remove_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.from_user:
        logger.warning("confirm_remove_callback_handler: query or query.from_user not found.")
        if query: await query.answer("‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
        return

    if not await ensure_user_has_joined(query, context): 
        await query.answer("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶ì ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶ú‡¶Ø‡¶º‡ßá‡¶® ‡¶ï‡¶∞‡ßá ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", show_alert=True)
        return

    await query.answer()
    user_id = query.from_user.id
    action = query.data

    if user_id not in user_sessions or not user_sessions[user_id].get('number'):
        try:
            await query.edit_message_text(text="üö´ ‡¶è‡¶á ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß‡¶ü‡¶ø ‡¶Ü‡¶∞ ‡¶¨‡ßà‡¶ß ‡¶®‡¶Ø‡¶º ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶≤‡¶ó‡¶á‡¶® ‡¶∏‡ßá‡¶∂‡¶® ‡¶¨‡¶æ ‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶®‡ßá‡¶á‡•§")
        except BadRequest: pass
        return

    number_to_remove = user_sessions[user_id]['number']

    if action == "confirm_remove_yes":
        client = user_sessions[user_id]['client']
        try:
            logger.info(f"User {user_id} confirmed removal for number: {number_to_remove}")
            incoming_phone_numbers = client.incoming_phone_numbers.list(phone_number=number_to_remove, limit=1)
            if not incoming_phone_numbers:
                await query.edit_message_text(text=f"‚ùì ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ {number_to_remove} ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")
                user_sessions[user_id]['number'] = None 
                return

            number_sid_to_delete = incoming_phone_numbers[0].sid
            client.incoming_phone_numbers(number_sid_to_delete).delete()
            user_sessions[user_id]['number'] = None
            await query.edit_message_text(text=f"üóëÔ∏è ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ {number_to_remove} ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
        except Exception as e:
            logger.error(f"Failed to remove number {number_to_remove} for user {user_id} after confirmation: {e}")
            await query.edit_message_text(text="‚ö†Ô∏è ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
    
    elif action == "confirm_remove_no":
        await query.edit_message_text(text="üö´ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")


async def handle_general_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await ensure_user_has_joined(update, context): return 

    user_id = update.effective_user.id
    text = update.message.text.strip()

    if user_id in user_sessions and text.startswith('+') and len(text) > 7 and text[1:].isdigit() and user_sessions[user_id].get('client'):
        number_to_buy = text
        client = user_sessions[user_id]['client']
        if user_sessions[user_id].get('number'):
            await update.message.reply_text(f"‚ÑπÔ∏è ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ({user_sessions[user_id]['number']}) ‡¶ï‡ßá‡¶®‡¶æ ‡¶Ü‡¶õ‡ßá‡•§ ‡¶®‡¶§‡ßÅ‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ï‡¶ø‡¶®‡¶§‡ßá ‡¶Ü‡¶ó‡ßá‡¶∞‡¶ü‡¶ø '{REMOVE_NUMBER_TEXT}' ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®‡•§")
            return
        try:
            logger.info(f"User {user_id} attempting to purchase {number_to_buy} via general text.")
            incoming_number = client.incoming_phone_numbers.create(phone_number=number_to_buy)
            user_sessions[user_id]['number'] = incoming_number.phone_number
            await update.message.reply_text(f"üõçÔ∏è ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ {incoming_number.phone_number} ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡ßá‡¶®‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ (‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶á‡¶®‡¶™‡ßÅ‡¶ü)", reply_markup=reply_markup)
        except Exception as e:
            logger.error(f"Failed to buy number {number_to_buy} for user {user_id} via general text: {e}")
            error_message = f"‚ùå ‡¶è‡¶á ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ü‡¶ø ({number_to_buy}) ‡¶ï‡¶ø‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ (‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶á‡¶®‡¶™‡ßÅ‡¶ü)"
            if "violates a uniqueness constraint" in str(e).lower() or "already provisioned" in str(e).lower():
                error_message = f"‚ö†Ô∏è ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ {number_to_buy} ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü‡ßá ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßá‡¶â ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶õ‡ßá‡•§"
            elif "AreaCode is required for an address-based search" in str(e):
                 error_message = "‚ÑπÔ∏è ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ï‡ßá‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ï‡ßã‡¶°‡¶∏‡¶π ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶® ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶â‡¶™‡¶≤‡¶≠‡ßç‡¶Ø ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶æ‡¶õ‡¶æ‡¶á ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"
            await update.message.reply_text(error_message)
    else:
        if context.user_data.get(USER_COMPLETED_ALL_JOINS_KEY, False):
            await update.message.reply_text("ü§î ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∞‡ßã‡¶ß ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®‡•§", reply_markup=reply_markup)


if __name__ == '__main__':
    TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
    if TOKEN is None:
        print("‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: TELEGRAM_BOT_TOKEN ‡¶®‡¶æ‡¶Æ‡¶ï ‡¶è‡¶®‡¶≠‡¶æ‡¶Ø‡¶º‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á!")
        logger.critical("TELEGRAM_BOT_TOKEN environment variable not set!")
        exit() 
    
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(f'^{LOGIN_TEXT}$'), login_command_handler)],
        states={
            LOGIN_AWAITING_CREDENTIALS: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_credentials)]
        },
        fallbacks=[] 
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("start", start))

    app.add_handler(MessageHandler(filters.Regex(f'^{LOGOUT_TEXT}$'), logout_handler))
    app.add_handler(MessageHandler(filters.Regex(f'^{BUY_TEXT}$'), buy_handler)) 
    app.add_handler(MessageHandler(filters.Regex(f'^{REMOVE_NUMBER_TEXT}$'), remove_number_handler))
    app.add_handler(MessageHandler(filters.Regex(f'^{SHOW_MESSAGES_TEXT}$'), show_messages_handler))
    
    app.add_handler(CallbackQueryHandler(purchase_number_callback_handler, pattern='^purchase_'))
    app.add_handler(CallbackQueryHandler(confirm_remove_callback_handler, pattern='^confirm_remove_(yes|no)$'))
    app.add_handler(CallbackQueryHandler(verify_all_joins_callback, pattern=f'^{VERIFY_ALL_JOINS_CALLBACK_DATA}$'))
    
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_general_text))

    print("Flask keep-alive server ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True 
    flask_thread.start()

    logger.info("ü§ñ Bot starting to poll... (Flask keep-alive server running on a separate thread)")
    app.run_polling()
